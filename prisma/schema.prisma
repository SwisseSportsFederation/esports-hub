generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SocialPlatform {
  INSTAGRAM
  TWITCH
  TWITTER
  DISCORD
  FACEBOOK
  STEAM
  ORIGIN
  BATTLENET
  UPLAY
  WEBSITE
}

enum RequestStatus {
  ACCEPTED
  PENDING
}

enum VerificationLevel {
  NOT_VERIFIED
  PRE_VERIFIED
  VERIFIED
}

enum AccessRight {
  NONE
  MEMBER
  MODERATOR
  ADMINISTRATOR
}

model Canton {
  id            BigInt         @id @default(autoincrement())
  name          String
  organisations Organisation[]
  teams         Team[]
  users         User[]

  @@index([name], map: "idx_cantons_name")
  @@map("canton")
}

model FormerTeam {
  id      BigInt    @id @default(autoincrement())
  user_id BigInt
  name    String
  from    DateTime? @db.Timestamptz(6)
  to      DateTime? @db.Timestamptz(6)
  user    User      @relation(fields: [user_id], references: [id])

  @@unique([user_id, name], map: "userID_name")
  @@map("former_team")
}

model Game {
  id    BigInt @id @default(autoincrement())
  name  String
  teams Team[]
  users User[]

  @@index([name], map: "idx_games_name")
  @@map("game")
}

model Language {
  id            BigInt         @id @default(autoincrement())
  name          String
  organisations Organisation[]
  teams         Team[]
  users         User[]

  @@index([name], map: "idx_languages_name")
  @@map("language")
}

model OrganisationMember {
  user_id              BigInt
  organisation_id      BigInt
  is_main_organisation Boolean
  joined_at            DateTime      @db.Timestamptz(6)
  role                 String
  request_status       RequestStatus @default(PENDING)
  access_rights        AccessRight   @default(NONE)
  organisation         Organisation  @relation(fields: [organisation_id], references: [id])
  user                 User          @relation(fields: [user_id], references: [id])

  @@id([user_id, organisation_id])
  @@map("organisation_member")
}

model Organisation {
  id                 BigInt               @id @default(autoincrement())
  name               String
  short_name         String
  description        String
  website            String?
  image              String?
  street             String?
  zip                String?
  country            String?
  canton_id          BigInt?
  verification_level VerificationLevel    @default(NOT_VERIFIED)
  is_active          Boolean              @default(true)
  canton             Canton?              @relation(fields: [canton_id], references: [id])
  languages          Language[]
  members            OrganisationMember[]
  socials            Social[]
  teams              Team[]

  @@map("organisation")
}

model Social {
  id              BigInt         @id @default(autoincrement())
  name            String
  platform        SocialPlatform
  organisation    Organisation?  @relation(fields: [organisation_id], references: [id])
  team            Team?          @relation(fields: [team_id], references: [id])
  user            User?          @relation(fields: [user_id], references: [id])
  organisation_id BigInt?
  team_id         BigInt?
  user_id         BigInt?

  @@map("social")
}

model TeamMember {
  user_id        BigInt
  team_id        BigInt
  is_main_team   Boolean?
  joined_at      DateTime?     @db.Timestamptz(6)
  role           String
  request_status RequestStatus @default(PENDING)
  access_rights  AccessRight   @default(NONE)
  team           Team          @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, team_id])
  @@map("team_member")
}

model Team {
  id                 BigInt            @id @default(autoincrement())
  name               String
  short_name         String
  description        String
  website            String?
  image              String?
  canton_id          BigInt?
  game_id            BigInt
  organisation_id    BigInt?
  verification_level VerificationLevel @default(NOT_VERIFIED)
  is_active          Boolean           @default(true)
  canton             Canton?           @relation(fields: [canton_id], references: [id])
  game               Game              @relation(fields: [game_id], references: [id])
  organisation       Organisation?     @relation(fields: [organisation_id], references: [id])
  request_status     RequestStatus?    @default(PENDING)
  languages          Language[]
  members            TeamMember[]
  socials            Social[]

  @@map("team")
}

model User {
  id                 BigInt               @id @default(autoincrement())
  auth_id            String?              @unique(map: "idx_users_auth_id")
  email              String
  nickname           String
  name               String
  surname            String
  birth_date         DateTime?            @db.Timestamptz(6)
  description        String?
  image              String?
  canton_id          BigInt?
  verification_level VerificationLevel    @default(NOT_VERIFIED)
  is_active          Boolean              @default(true)
  canton             Canton?              @relation(fields: [canton_id], references: [id])
  former_teams       FormerTeam[]
  organisations      OrganisationMember[]
  teams              TeamMember[]
  games              Game[]
  languages          Language[]
  socials            Social[]

  @@map("user")
}
