generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enums

enum SocialPlatform {
  INSTAGRAM
  TWITCH
  TWITTER
  DISCORD
  FACEBOOK
  STEAM
  ORIGIN
  BATTLENET
  UPLAY
  WEBSITE
}

enum RequestStatus {
  ACCEPTED
  PENDING_USER
  PENDING_GROUP
  PENDING_PARENT_GROUP
}

enum VerificationLevel {
  NOT_VERIFIED
  PRE_VERIFIED
  VERIFIED
}

enum AccessRight {
  MEMBER
  MODERATOR
  ADMINISTRATOR
}

enum EntityType {
  USER
  TEAM
  ORGANISATION
}

// models

model Group {
  id                 BigInt            @id @default(autoincrement())
  name               String
  handle             String            @unique
  description        String
  founded            DateTime?
  image              String?
  street             String?
  zip                String?
  canton_id          BigInt?
  game_id            BigInt?
  verification_level VerificationLevel @default(NOT_VERIFIED)
  group_type         EntityType        @default(TEAM)
  is_active          Boolean           @default(true)
  canton             Canton?           @relation(fields: [canton_id], references: [id])
  game               Game?             @relation(fields: [game_id], references: [id])
  languages          Language[]
  members            GroupMember[]
  parent             GroupToGroup?     @relation("GroupToGroup_child")
  children           GroupToGroup[]    @relation("GroupToGroup_parent")
  socials            Social[]

  @@map("group")
}

model GroupToGroup {
  child_id       BigInt        @unique
  parent_id      BigInt
  request_status RequestStatus
  parent         Group         @relation("GroupToGroup_parent", fields: [parent_id], references: [id], onDelete: Cascade)
  child          Group         @relation("GroupToGroup_child", fields: [child_id], references: [id], onDelete: Cascade)

  @@id([child_id, parent_id])
  @@map("group_to_group")
}

model GroupMember {
  user_id        BigInt
  group_id       BigInt
  is_main_group  Boolean
  joined_at      DateTime      @db.Timestamptz(6)
  role           String
  request_status RequestStatus
  access_rights  AccessRight
  group          Group         @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, group_id])
  @@map("group_member")
}

model FormerTeam {
  id      BigInt   @id @default(autoincrement())
  user_id BigInt
  name    String
  from    DateTime @db.Timestamptz(6)
  to      DateTime @db.Timestamptz(6)
  user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, name], map: "userID_name")
  @@map("former_team")
}

model User {
  id                 BigInt            @id @default(autoincrement())
  auth_id            String?           @unique(map: "idx_users_auth_id")
  email              String
  handle             String            @unique
  name               String
  surname            String
  birth_date         DateTime?         @db.Timestamptz(6)
  description        String
  image              String?
  canton_id          BigInt?
  verification_level VerificationLevel @default(NOT_VERIFIED)
  is_active          Boolean           @default(true)
  canton             Canton?           @relation(fields: [canton_id], references: [id])
  former_teams       FormerTeam[]
  groups             GroupMember[]
  games              Game[]
  languages          Language[]
  socials            Social[]
  has_data_policy    Boolean           @default(false)
  is_superadmin      Boolean?          @default(false)

  @@map("user")
}

model Canton {
  id     BigInt  @id @default(autoincrement())
  name   String
  groups Group[]
  users  User[]

  @@index([name], map: "idx_cantons_name")
  @@map("canton")
}

model Language {
  id     BigInt  @id @default(autoincrement())
  name   String
  groups Group[]
  users  User[]

  @@index([name], map: "idx_languages_name")
  @@map("language")
}

model Game {
  id        BigInt  @id @default(autoincrement())
  name      String
  groups    Group[]
  users     User[]
  is_active Boolean @default(false)

  @@index([name], map: "idx_games_name")
  @@map("game")
}

model Social {
  id       BigInt         @id @default(autoincrement())
  name     String
  platform SocialPlatform
  group    Group?         @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user     User?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group_id BigInt?
  user_id  BigInt?

  @@map("social")
}
